package epaper

import (
	"image"
	"log"
	"time"
)

func (e *Epaper) sendPartial(x, y, l, w int) {
	e.sendData(byte(x >> 8))
	e.sendData(byte(x & 0xf8))
	e.sendData(byte(y >> 8))
	e.sendData(byte(y & 0xff))
	e.sendData(byte(w >> 8))
	e.sendData(byte(w & 0xf8))
	e.sendData(byte(l >> 8))
	e.sendData(byte(l & 0xff))
}

func (e *Epaper) WriteImageQuick(img *image.Gray, x, y int) {
	e.initQuick()
	if e.lastFrame == nil {
		// TODO: figure out a better way to do this
		log.Fatal("you must call 'WriteImage' before 'WriteImageQuick'")
		return
	}

	bounds := img.Bounds()
	w := bounds.Max.X
	h := bounds.Max.Y

	e.setLutQuick()
	time.Sleep(2 * time.Millisecond)

	x = (x + 7) / 8 * 8 // round up to nearest 8
	y = y / 8 * 8       // round down to nearest 8

	e.sendCommand(partialDataStartTransmission1)
	time.Sleep(2 * time.Millisecond)

	e.sendPartial(x, y, h, w)
	time.Sleep(2 * time.Millisecond)

	oldImg := e.lastFrame.SubImage(image.Rect(x, y, x+w, y+h))
	oldBuf := getImageBuffer(oldImg)
	e.sendData(oldBuf...)
	time.Sleep(2 * time.Millisecond)
	e.sendCommand(partialDataStartTransmission2)
	time.Sleep(2 * time.Millisecond)
	e.sendPartial(x, y, h, w)

	e.lastFrame = img
	// subImg := img.SubImage(image.Rect(x, y, x+w, y+h))
	// newBuf := getImageBuffer(subImg)
	newBuf := getImageBuffer(img)
	e.sendData(newBuf...)
	time.Sleep(2 * time.Millisecond)
	e.sendCommand(partialDisplayRefresh)
	time.Sleep(2 * time.Millisecond)
	e.sendPartial(x, y, h, w)
	e.waitUntilIdle()
	e.setLut() // restore normal LUT
}

func (e *Epaper) setLutQuick() {
	e.sendCommand(lutForVcom) // vcom
	e.sendData(quickLutVcomDC...)

	e.sendCommand(lutWhiteToWhite) // ww --
	e.sendData(quickLutWw...)

	e.sendCommand(lutBlackToWhite) // bw r
	e.sendData(quickLutBw...)

	e.sendCommand(lutWhiteToBlack) // wb w
	e.sendData(quickLutBb...)

	e.sendCommand(lutBlackToBlack) // bb b
	e.sendData(quickLutWb...)
}

// TODO: merge with init()
func (e *Epaper) initQuick() {
	e.reset()
	e.sendCommand(powerSetting)
	e.sendData(0x03) // VDS_EN, VDG_EN
	e.sendData(0x00) // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
	e.sendData(0x2b) // VDH
	e.sendData(0x2b) // VDL
	e.sendData(0x09) // VDHR
	e.sendCommand(boosterSoftStart)
	e.sendData(0x07)
	e.sendData(0x07)
	e.sendData(0x17)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0x60)
	e.sendData(0xA5)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0x89)
	e.sendData(0xA5)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0x90)
	e.sendData(0x00)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0x93)
	e.sendData(0x2A)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0xA0)
	e.sendData(0xA5)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0xA1)
	e.sendData(0x00)
	// Power optimization
	e.sendCommand(0xF8)
	e.sendData(0x73)
	e.sendData(0x41)
	e.sendCommand(partialDisplayRefresh)
	e.sendData(0x00)
	e.sendCommand(powerOn)

	e.waitUntilIdle()
	e.sendCommand(panelSetting)
	e.sendData(0xAF) // KW-BF   KWR-AF    BWROTP 0f
	e.sendCommand(pllControl)
	e.sendData(0x3A) // 3A 100HZ   29 150Hz 39 200HZ    31 171HZ
	e.sendCommand(vcmDcSettingRegister)
	e.sendData(0x12)
	time.Sleep(2 * time.Millisecond)
	e.setLutQuick()
	// EPD hardware init end
}

var (
	quickLutVcomDC = []byte{
		0x00, 0x0E, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	quickLutWw = []byte{
		0xA0, 0x0E, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	quickLutBw = []byte{
		0xA0, 0x0E, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	quickLutBb = []byte{
		0x50, 0x0E, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	quickLutWb = []byte{
		0x50, 0x0E, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
)
